clear all;close all;clc;
%=======================================================
% generating  wave data with txt hex format
%=======================================================
info1 =audioinfo('D:/fpga_competition/matlabcode_for_check/A 去噪测试音频/去噪测试音频样本1.m4a');%获取音频文件的信息
[audio1,Fs1] = audioread('D:/fpga_competition/matlabcode_for_check/A 去噪测试音频/去噪测试音频样本1.m4a');%读取音频文件
info2 =audioinfo('D:/fpga_competition/matlabcode_for_check/A 去噪测试音频/去噪测试音频样本2.m4a');%获取音频文件的信息
[audio2,Fs2] = audioread('D:/fpga_competition/matlabcode_for_check/A 去噪测试音频/去噪测试音频样本2.m4a');%读取音频文件





 y = uint16(audio2*2^11);

fid         = fopen('cosx0p25m7p5m12bit.txt', 'wt') ;
fprintf(fid, '%x\n', y) ;
fclose(fid) ;



%% 
fc          = 1500 ;      % 中心频率
fn          = 20000 ;       % 杂波频率
Fs          = 50e6 ;        % 采样频率
T           = 1/fc ;        % 信号周期
Num         = Fs * T ;      % 周期内信号采样点数
t           = (0:Num-1)/Fs ;      % 离散时间
cosx        = cos(2*pi*fc*t) ;    % 中心频率正弦信号
cosn        = cos(2*pi*fn*t) ;    % 杂波信号
cosx1  = mapminmax( cosx);
cosx2 =  floor((2^11-1) * cosx1 + 2^11) ;
cosy        = mapminmax(cosx + cosn) ;     %幅值扩展到（-1,1） 之间
cosy_dig    = floor((2^11-1) * cosy + 2^11) ;     %幅值扩展到 0~4095
fid         = fopen('cosx.txt', 'wt') ;  %写数据文件
fprintf(fid, '%x\n', cosx2) ;
fclose(fid) ;
 
%时域波形
figure(1);
subplot(121);plot(t,cosx);hold on ;
plot(t,cosn) ;
subplot(122);plot(t,cosy_dig) ;
 
%频域波形
figure;
fft_cosy    = fftshift(fft(cosy, Num)) ;
f_axis      = (-Num/2 : Num/2 - 1) * (Fs/Num) ;
figure(5) ;
plot(f_axis, abs(fft_cosy)) ;
%%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      LMS自适应滤波算法
%   由于射频前端低噪放、滤波等电路的不一致性，导致相同的接收信号通过接收通道后，
%   信号幅度和相位并不相同。为此，需要对通道的幅相误差进行校正。  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%               参数设置
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fc=10e6;         % 信号频率
fs=20*fc;        % 采样频率
count=1024;      % 采样点数
SNR=10;          % 信噪比
t=0:1/fs:(count-1)/fs;


% LMS算法相关参数
M=50;       % 滤波器的系数
Num_iteration=count; % 迭代次数



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%               蒙特卡罗仿真
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Monte_Times=50; % 蒙特卡罗次数
sum_w=0;
sum_en=0;
sum_yn=0;
for p=1:Monte_Times
    %----第一种信号
    dn = ;% 期望信号
    noise = randn(1,count); % 高斯白噪声
    un = dn+noise;          % 输入信号


    dn=real(dn); % 得到信号的实部
    un=real(un);

    un = un.';   % 转置为列向量
    dn = dn.'; 

    % 求收敛常数
    lamda_max = max(eig(un*un.'));%求解输入xn的自相关矩阵的最大特征值,A = eig(B),意为将矩阵B的特征值组成向量A
    mu = 2*(1/lamda_max);



    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %               LMS算法
    % 输入参数：
    %     un                输入信号       列向量
    %     dn                参考信号       列向量
    %     mu                步长因子       标量
    %     Num_iteration     迭代次数       标量
    %     M                 滤波器阶数     标量
    % 输出参数：
    %     w    滤波器的系数矩阵    M×Num_iteration  滤波器的系数是一个M列的列矢量，Num_iteration表示迭代次数，每一次迭代都是一个列矢量
    %     en   误差信号            1×Num_iteration  每一次迭代后产生的误差
    %     yn   滤波器的输出信号    1×Num_iteration  行向量
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    [w,en,yn] = my_LMS(un,dn,mu,Num_iteration,M);

    
    sum_w=sum_w+w;
    sum_en=sum_en+en;
    sum_yn=sum_yn+yn;
end
mean_w=sum_w/Monte_Times;
mean_en=sum_en/Monte_Times;
mean_yn=sum_yn/Monte_Times;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%               绘图
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(1);
plot(t*1e6,dn);hold on;
plot(t*1e6,un);hold on;
xlabel('时间/us');ylabel('幅度');
legend('期望信号','输入信号');


figure(2);
plot(t*1e6,dn,'-r');hold on;
plot(t*1e6,mean_yn,'-b');hold on;
plot(t*1e6,mean_en,'-k');
xlabel('时间/us');ylabel('幅度');
legend('期望信号','输出信号','误差信号');
title('三种信号的比较');

figure(3);
plot(mean_w(1,:),'-r');hold on;
plot(mean_w(2,:),'-b');hold on;
plot(mean_w(3,:),'-k');hold on;
xlabel('迭代次数');ylabel('幅度');
legend('第一个系数','第二个系数','第三个系数');
title('滤波器的系数');






























